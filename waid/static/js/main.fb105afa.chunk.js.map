{"version":3,"sources":["models/Record.js","uitls/Store.js","views/Index/index.js","views/App/index.js","uitls/serviceWorker.js","index.js"],"names":["Record","title","timeList","Object","classCallCheck","this","obj","startTime","relativeStr","checkTimeList","filter","el","start","end","Date","now","push","length","relativeTime","str","days","parseInt","hours","minutes","seconds","Local","createClass","key","value","tmp","localStorage","getItem","JSON","parse","err","stringify","setItem","Item","list_default","a","modal","vivible","Index","props","_this","possibleConstructorReturn","getPrototypeOf","call","localKey","state","recordList","loadeRecordList","timerID","prevProps","prevState","storeRecordList","stop","index","_this2","record","started","forEach","setInterval","update","setState","clearInterval","alert","get","records","set","_this3","react_default","createElement","className","renderHeader","map","item","onClick","extra","switchModal","modal_default","visible","transparent","maskClosable","footer","text","onPress","addItem","input_item_default","clear","maxLength","onChange","handleInputChange","React","Component","App","src_views_Index","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","views_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fb105afa.chunk.js","sourcesContent":["export default class Record {\n  constructor(title, timeList) {\n    let obj =\n      typeof title === 'object'\n        ? title\n        : {\n            title: title,\n            timeList: timeList\n          }\n    this.title = obj.title || ''\n    this.startTime = obj.startTime || 0\n    this.relativeStr = obj.relativeStr || ''\n    this.timeList = obj.timeList || []\n    this.checkTimeList()\n  }\n\n  checkTimeList() {\n    this.timeList = this.timeList.filter(el => {\n      return el.start !== 'undefined' && typeof el.end !== 'undefined'\n    })\n  }\n\n  start() {\n    if (!this.startTime) {\n      this.startTime = Date.now()\n      this.timeList.push({\n        start: this.startTime,\n        end: 0\n      })\n    }\n  }\n\n  stop() {\n    this.startTime = 0\n    this.timeList[this.timeList.length - 1].end = Date.now()\n  }\n\n  update() {\n    let now = Date.now()\n    let relativeTime = Date.now() - this.startTime\n    let str = ''\n    let dTime = 1 * 24 * 60 * 60 * 1000\n    let hTime = 1 * 60 * 60 * 1000\n    let mTime = 1 * 60 * 1000\n    let sTime = 1 * 1000\n    if (relativeTime >= dTime) {\n      let days = parseInt(relativeTime / dTime)\n      relativeTime = relativeTime - days * dTime\n      str += days + '天'\n    }\n    if (relativeTime >= hTime) {\n      let hours = parseInt(relativeTime / hTime)\n      relativeTime = relativeTime - hours * hTime\n      str += hours + '小时'\n    }\n    if (relativeTime >= mTime) {\n      let minutes = parseInt(relativeTime / mTime)\n      relativeTime = relativeTime - minutes * mTime\n      str += minutes + '分'\n    }\n    if (relativeTime >= sTime) {\n      let seconds = parseInt(relativeTime / sTime)\n      relativeTime = relativeTime - seconds * sTime\n      str += seconds + '秒'\n    }\n    this.timeList[this.timeList.length - 1].end = now\n    this.relativeStr = str\n    // console.log(this)\n  }\n}\n","export class Local {\n  static get(key) {\n    let tmp = localStorage.getItem(key)\n    try {\n      tmp = JSON.parse(tmp)\n    } catch (err) {}\n    return tmp\n  }\n\n  static set(key, value) {\n    try {\n      value = JSON.stringify(value)\n    } catch (err) {}\n    localStorage.setItem(key, value)\n  }\n}\n","/**\n * 首页\n * @module /Index/index\n */\n\nimport './index.scss'\nimport React from 'react'\nimport { List, Modal, InputItem } from 'antd-mobile'\nimport Record from '../../models/Record'\nimport { Local } from '../../uitls/Store'\n\nconst Item = List.Item\n\nconst modal = {\n  vivible: false,\n  value: ''\n}\n\nclass Index extends React.Component {\n  constructor(props) {\n    super(props)\n    this.localKey = 'waid-index-record-list'\n    this.state = {\n      recordList: this.loadeRecordList(),\n      modal: modal\n    }\n    // console.log(this)\n    this.timerID = null\n  }\n\n  componentDidMount() {\n    this.start()\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.storeRecordList()\n  }\n\n  componentWillUnmount() {\n    this.stop()\n  }\n\n  start(index) {\n    let recordList = this.state.recordList\n    let record = recordList[index] || new Record()\n    record.started = !record.started\n    if (!record.started) {\n      record.stop()\n    }\n    let started = false\n    recordList.forEach(el => {\n      started = started || el.started\n    })\n    if (!started) {\n      this.stop()\n    } else if (this.timerID) {\n      record.start()\n    } else {\n      record.start()\n      this.timerID = setInterval(() => {\n        recordList.forEach(el => {\n          if (el.started) el.update()\n        })\n        this.setState({\n          recordList: recordList\n        })\n      }, 1000)\n    }\n  }\n\n  stop() {\n    clearInterval(this.timerID)\n    this.timerID = null\n    this.storeRecordList()\n  }\n\n  addItem() {\n    if (!modal.value) {\n      alert('请输入正确的标题')\n      return false\n    }\n    let recordList = this.state.recordList\n    recordList.push(new Record(modal.value))\n    this.setState({\n      recordList: recordList\n    })\n    return true\n  }\n\n  switchModal() {\n    modal.vivible = !modal.vivible\n    modal.value = modal.vivible ? '' : modal.value\n    this.setState({\n      modal: modal\n    })\n  }\n\n  handleInputChange(value) {\n    modal.value = value\n    this.setState({\n      modal: modal\n    })\n  }\n\n  loadeRecordList() {\n    let tmp = Local.get(this.localKey) || []\n    let records = []\n    tmp.forEach(el => {\n      let record = new Record(el)\n      record.started = el.started\n      records.push(record)\n    })\n    return records\n  }\n\n  storeRecordList() {\n    Local.set(this.localKey, this.state.recordList)\n  }\n\n  render() {\n    // console.log(this.props.form)\n    return (\n      <section className=\"index\">\n        <List renderHeader={() => '我在做些什么？!'} className=\"index-list\">\n          {this.state.recordList.map((item, index) => (\n            <Item\n              onClick={() => {\n                this.start(index)\n              }}\n              extra={item.relativeStr}\n              key={index}\n            >\n              {item.title}\n            </Item>\n          ))}\n        </List>\n        <div className=\"index-add\" onClick={() => this.switchModal()}>\n          添加事项\n        </div>\n        <Modal\n          visible={this.state.modal.vivible}\n          transparent\n          maskClosable={true}\n          title=\"输入事情的标题\"\n          footer={[\n            {\n              text: '确认',\n              onPress: () => {\n                if (this.addItem()) {\n                  this.switchModal()\n                }\n              }\n            }\n          ]}\n        >\n          <div className=\"btn\">\n            <InputItem clear maxLength=\"30\" onChange={value => this.handleInputChange(value)} />\n          </div>\n        </Modal>\n      </section>\n    )\n  }\n}\n\nexport default Index\n","import React from 'react'\nimport Index from '../Index/index'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <section className=\"app\">\n        <Index />\n      </section>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './views/App/'\nimport * as serviceWorker from './uitls/serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}